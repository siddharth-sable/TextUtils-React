{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","about","onClick","toggleMode","htmlFor","TextForm","changeToLower","newText","text","toLowerCase","setText","showAlert","useState","style","color","backgroundColor","heading","rows","value","onChange","event","target","toUpperCase","getCapitalWord","str","slice","split","map","join","length","match","defaultProps","capitalize","word","lower","charAt","Alert","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2f156098.chunk.js","sourcesContent":["import React from \"react\";\r\n// import { BlockPicker } from \"react-color\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport { a } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  // const [color, setColor] = useState(\"#000\");\r\n\r\n  // const [showColorPicker, setShowColorPicker] = useState(false);\r\n  return (\r\n    <>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${\r\n          props.mode === \"light\" ? \"primary\" : \"dark\"\r\n        } bg-${props.mode === \"light\" ? \"primary\" : \"dark\"}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand text-light\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-a text-light\" href=\"#\">\r\n                  {props.about}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n\r\n            <div className=\"form-check form-switch\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"form-check-input\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n                className={`form-check-label text-${\r\n                  props.mode === \"light\" ? \"dark\" : \"light\"\r\n                }`}\r\n              >\r\n                Enable DarkMode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* \r\n      \r\n <div className=\"dropdown mx-2 \">\r\n <button\r\n   className=\"btn btn-primary dropdown-toggle my-2\"\r\n   type=\"button\"\r\n   id=\"dropdownMenuButton1\"\r\n   data-bs-toggle=\"dropdown\"\r\n   aria-expanded=\"false\"\r\n   onClick={() =>\r\n     setShowColorPicker((showColorPicker) => !showColorPicker)\r\n   }\r\n >\r\n   {showColorPicker ? \"Close\" : \"Pick A Color\"}\r\n </button>\r\n <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\r\n   <li>\r\n     {showColorPicker && (\r\n       <BlockPicker\r\n         color={color}\r\n         onChange={(updatedColor) => setColor(updatedColor.hex)}\r\n       />\r\n     )}\r\n   </li>\r\n </ul>\r\n </div\r\n <h2>You picked {color}</h2> */}\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Title Here\",\r\n  about: \"about here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const changeToUpper = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = text.toUpperCase();\r\n    props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n    setText(newText);\r\n  };\r\n\r\n  const clearText = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  };\r\n\r\n  const changeToLower = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n  };\r\n\r\n  const changeToSentenceCase = () => {\r\n    let getCapitalWord = (str) =>\r\n      str[0].toUpperCase() + str.slice(1).toLowerCase();\r\n\r\n    let getCapitalizedString = () =>\r\n      text.split(\" \").map(getCapitalWord).join(\" \");\r\n    props.showAlert(\"Converted to SentenceCase!\", \"success\");\r\n    setText(getCapitalizedString());\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(event.target.value);\r\n    setText(event.target.value);\r\n    // console.log(\"clicked\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"black\" : props.color,\r\n          backgroundColor: props.mode === \"dark\" ? props.color : \"white\",\r\n        }}\r\n      >\r\n        <div>\r\n          <label htmlFor=\"myBox\" className=\"form-label\">\r\n            <h3> {props.heading}</h3>\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n              backgroundColor: props.mode === \"dark\" ? props.color : \"white\",\r\n            }}\r\n          ></textarea>\r\n          <button\r\n            className={`btn btn-${\r\n              props.mode === \"dark\" ? \"info\" : \"primary\"\r\n            } my-4  mx-2 text-${\r\n              props.mode === \"dark\" ? props.color : \"white\"\r\n            } `}\r\n            onClick={changeToUpper}\r\n          >\r\n            Change to UpperCase\r\n          </button>\r\n          <button\r\n            className={`btn btn-${\r\n              props.mode === \"dark\" ? \"info\" : \"primary\"\r\n            } my-4  mx-2 text-${\r\n              props.mode === \"dark\" ? props.color : \"white\"\r\n            } `}\r\n            onClick={changeToLower}\r\n          >\r\n            Change to Lowercase\r\n          </button>\r\n          <button\r\n            className={`btn btn-${\r\n              props.mode === \"dark\" ? \"info\" : \"primary\"\r\n            } my-4  mx-2 text-${\r\n              props.mode === \"dark\" ? props.color : \"white\"\r\n            } `}\r\n            onClick={changeToSentenceCase}\r\n          >\r\n            Change to Sentence Case\r\n          </button>\r\n          <button\r\n            className={`btn btn-${\r\n              props.mode === \"dark\" ? \"info\" : \"primary\"\r\n            } my-4  mx-2 text-${\r\n              props.mode === \"dark\" ? props.color : \"white\"\r\n            } `}\r\n            onClick={changeToLower}\r\n          >\r\n            Change to Lowercase\r\n          </button>\r\n          <button\r\n            className={`btn btn-${\r\n              props.mode === \"dark\" ? \"info\" : \"primary\"\r\n            } my-4 mx-2 text-${props.mode === \"dark\" ? props.color : \"white\"} `}\r\n            onClick={clearText}\r\n          >\r\n            Clear\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n\r\n          backgroundColor: props.mode === \"dark\" ? props.color : \"white\",\r\n        }}\r\n      >\r\n        <hr\r\n          style={{\r\n            color: props.mode === \"dark\" ? \"black\" : props.color,\r\n          }}\r\n        />\r\n        <h1\r\n          style={{\r\n            color: props.mode === \"dark\" ? \"white\" : props.color,\r\n          }}\r\n        >\r\n          Your Text Summary\r\n        </h1>\r\n        <p>\r\n          {/* {text.length > 0 ? text.split(\" \").length : \"0\"} words and{\" \"} */}\r\n          {text.length > 0 ? text && text.match(/(\\w+)/g).length : \"0\"} words\r\n          and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length}</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0 ? text : \"Enter something in above textfield bro!\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nconst capitalize = (word) => {\r\n  let lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n};\r\nexport default function Alert(props) {\r\n  return (\r\n    props.alert && (\r\n      <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}!</strong>- {props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import Navbar from \"./components/Navbar\";\n\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport Alert from \"./components/Alert\";\nimport React, { useState } from \"react\";\n\n// import { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport \"./App.css\";\n// import About from \"./components/About\";\n\nfunction App() {\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n\n      document.body.style.backgroundColor = \"black\";\n      showAlert(\"Dark Mode has been Enabled!\", \"success\");\n      document.title = \"Welcome to Dark Mode!\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"#fff\";\n      showAlert(\"Light Mode has been Enabled!\", \"success\");\n      document.title = \"Welcome to TextUtils!\";\n    }\n  };\n  // const toggleMode = () => {\n  //   if (mode === \"light\") {\n  //     setMode(\"dark\");\n\n  //     document.body.style.backgroundColor = \"#000\";\n  //     showAlert(\"Dark Mode has been Enabled!\", \"success\");\n  //   } else {\n  //     setMode(\"light\");\n  //     document.body.style.backgroundColor = \"#fff\";\n  //     showAlert(\"Light Mode has been Enabled!\", \"success\");\n  //   }\n  // };\n  const [mode, setMode] = useState(\"light\"); //whether mode is enabled or not\n\n  const [alert, setAlert] = useState(null);\n\n  let showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar\n          title=\"TextUtils\"\n          about=\"About Us\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        {/* <Switch>\n          <Route path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route path=\"/\"> */}\n            <TextForm\n              heading=\"Enter Text Below to Analyze\"\n              mode={mode}\n              showAlert={showAlert}\n              color={\"black\"}\n            />\n          {/* </Route> */}\n        {/* </Switch> */}\n        <Alert alert={alert} />\n\n        {/* <About /> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}